
# Model process ----
# Y is Volume Sold
# Xs are SKU, NDP(or NLC)/Quantity_less_Old_Code, Policy Discount, Special Discount

source("00_Data/Raw_data_import.R")

#Multilevel modeling in R:
#library(lme4)
library(tidyr)
library(purrr)
library(broom)
library(dplyr)
library(readr)


library(rsample)
data_split <- initial_split(Price_hist %>% select(-Month_in_tm,-Customer,-CALMONTH,-`Old Code`,-Indicator,-`Old Code`),prop=0.80)
train_tbl <- training(data_split)
test_tbl <- testing(data_split)

library(h2o)

h2o.init()

split.h2o <- h2o.splitFrame(as.h2o(train_tbl),ratios = c(0.85),seed=1234)

train_h2o <- split.h2o[[1]]
valid_h2o <- split.h2o[[2]]
test_h2o <- as.h2o(test_tbl)


Y <- "NDP"
X <- setdiff(names(train_h2o),Y)

automl_models_h2o <- h2o.automl(
  x=X,
  y=Y,
  training_frame = train_h2o,
  validation_frame = valid_h2o,
  leaderboard_frame = test_h2o,
  max_runtime_secs = 600,
  nfolds = 5
)

automl_models_h2o@leaderboard

h2o.getModel("StackedEnsemble_BestOfFamily_AutoML_20200617_215541") %>% 
  h2o.saveModel(path="04_Data_Modeling/")

#loading the model
Stacked_Ensemble_model <- h2o.loadModel("04_Data_Modeling/StackedEnsemble_BestOfFamily_AutoML_20200617_215541")


prediction <- h2o.predict(Stacked_Ensemble_model,newdata=test_h2o) %>% as_tibble()

data_with_prediction <- cbind(test_tbl,prediction)
